// Generated by gencpp from file pxrf/PxrfMsg.msg
// DO NOT EDIT!


#ifndef PXRF_MESSAGE_PXRFMSG_H
#define PXRF_MESSAGE_PXRFMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pxrf
{
template <class ContainerAllocator>
struct PxrfMsg_
{
  typedef PxrfMsg_<ContainerAllocator> Type;

  PxrfMsg_()
    : dailyId(0)
    , testId(0)
    , testDateTime()
    , chemistry()  {
    }
  PxrfMsg_(const ContainerAllocator& _alloc)
    : dailyId(0)
    , testId(0)
    , testDateTime(_alloc)
    , chemistry(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _dailyId_type;
  _dailyId_type dailyId;

   typedef int64_t _testId_type;
  _testId_type testId;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _testDateTime_type;
  _testDateTime_type testDateTime;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _chemistry_type;
  _chemistry_type chemistry;





  typedef boost::shared_ptr< ::pxrf::PxrfMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pxrf::PxrfMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PxrfMsg_

typedef ::pxrf::PxrfMsg_<std::allocator<void> > PxrfMsg;

typedef boost::shared_ptr< ::pxrf::PxrfMsg > PxrfMsgPtr;
typedef boost::shared_ptr< ::pxrf::PxrfMsg const> PxrfMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pxrf::PxrfMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pxrf::PxrfMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pxrf::PxrfMsg_<ContainerAllocator1> & lhs, const ::pxrf::PxrfMsg_<ContainerAllocator2> & rhs)
{
  return lhs.dailyId == rhs.dailyId &&
    lhs.testId == rhs.testId &&
    lhs.testDateTime == rhs.testDateTime &&
    lhs.chemistry == rhs.chemistry;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pxrf::PxrfMsg_<ContainerAllocator1> & lhs, const ::pxrf::PxrfMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pxrf

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pxrf::PxrfMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pxrf::PxrfMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pxrf::PxrfMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pxrf::PxrfMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pxrf::PxrfMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pxrf::PxrfMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pxrf::PxrfMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ded31cc28f81581de2d0d50d228d3dc";
  }

  static const char* value(const ::pxrf::PxrfMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ded31cc28f81581ULL;
  static const uint64_t static_value2 = 0xde2d0d50d228d3dcULL;
};

template<class ContainerAllocator>
struct DataType< ::pxrf::PxrfMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pxrf/PxrfMsg";
  }

  static const char* value(const ::pxrf::PxrfMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pxrf::PxrfMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 dailyId\n"
"int64 testId\n"
"string testDateTime\n"
"string chemistry\n"
;
  }

  static const char* value(const ::pxrf::PxrfMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pxrf::PxrfMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dailyId);
      stream.next(m.testId);
      stream.next(m.testDateTime);
      stream.next(m.chemistry);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PxrfMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pxrf::PxrfMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pxrf::PxrfMsg_<ContainerAllocator>& v)
  {
    s << indent << "dailyId: ";
    Printer<int64_t>::stream(s, indent + "  ", v.dailyId);
    s << indent << "testId: ";
    Printer<int64_t>::stream(s, indent + "  ", v.testId);
    s << indent << "testDateTime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.testDateTime);
    s << indent << "chemistry: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.chemistry);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PXRF_MESSAGE_PXRFMSG_H
